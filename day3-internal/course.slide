Advanced Go
Day 3 - Buenos Aires, Argentina
15 Jan 2019
Tags: golang, apis, http

Eduardo Acosta Miguens
eduardo.miguens@mercadolibre.com

Ezequiel Lovelle
ezequiel.lovelle@mercadolibre.com

Marco Boschetti
marco.boschetti@mercadolibre.com

* Testing APIs / Idioms 

 import "testing"

Golang tiene cierto soporte de test en la standard library,

Todas las funciones de un archivo con sufijo *_test.go* y que tengan la firma:

 func Test___(t *testing.T)

Se consideran tests, se buildean y ejecutan solo con:

 go test . // ejecuta todos los tests del package actual

Si queremos ejecutar varios paquetes podemos hacer:

 go test ./... // ejecuta recursivamente el directorio actual y los subdirectorios

* Testing APIs / Idioms (cont.)

- Los tests corren muuuy rapido. Ô∏èÔ∏èÔ∏è‚ù§Ô∏è
- *No* es facil hacer mocks auto-m√°gicos. üò¢
- Hay que codear pensando en testing. *IoC* (Inversion of Control).
- Hacer uso de interfaces simplifica mockear, y como son implicitas...
- No requiere librer√≠a externas (aunque hay helpers √∫tiles).

* Tipos de Test

Podemos hacer tests de tipo caja negra o caja blanca.

 package car 

 func speed() int { 
    return 2
 }
 
 func Wheels() int {
    return 4
 }

Dado ese paquete, podemos tener varios archivos *_test.go*

* Tests (cont.)

Black Box: metodos publicos (car_test.go)

 package car_test

 func TestWheels(t *testing.T) {
    if w := car.Wheels(); w != 4 {
        t.Fatalf("expected 4 wheels, got %d", w)
    }
 }

White Box: para testear metodos privados (car_private_test.go)

 package car

 func TestSpeed(t *testing.T) {
    if s := car.speed(); s != 2 {
        t.Fatalf("expected speed to be 2, got %d", s)
    }
 }

* Costumbres (c√≥digo idiomatico)

- Los tests de un paquete se encuentran en el mismo paquete. Hablamos sobre paquetes?
- *NO* es idiomatico tener una carpeta que se llame "tests" y tenerlos ahi dentro. Aguanten la tentaci√≥n.
- Si el archivo se llama *enumerator.go* lo normal es tener un archivo de tests *enumerator_test.go*. Se puede tener m√°s de 1 archivo de tests.
- Lo normal es hacer uso de test tables para armar varios casos de prueba (siendo creativos y usando lambdas).

* Setup/Teardown

No es necesario, pero en caso de desearlo puede agregarse el siguiente metodo para hacer setup o teardown de los tests de un paquete.

 func TestMain(m *testing.M) {
     // setup()
     code := m.Run() 
     // teardown()

     os.Exit(code)
 }

* Test Tables

Es un pattern que se ve por toda la standard library.

 func TestSomething(t *testing.T) {
     tt := []struct {
         Name        string
         SetupFunc   func(t *testing.T, ...)
         AssertFuncs []func(t *testing.T, ...)
     }{
         {
             Name:"Caso 1"
         },
         ...
     }

     for _, tc := range tt {
         t.Run(tc.Name, func(t *testing.T){
            // ...
         })
     }
 }

En este caso *t.Run* genera un subtest llamado "TestSomething/Caso_1"

* Assertions

El framework de testing nativo no tiene assertions, recomienda usar if => t.Fatal.

 if got != expected {
     t.Fatalf("expected %d, got %d", expected, got)
 }

Nosotros en general usamos la siguiente lib para reducir el boilerplate.

 import "github.com/stretchr/testify/require"

 require.Equal(t, expected, got)

* Mocks

Vamos a ver un caso concreto...

* Mocks HTTP

Vamos a usar una lib

.link https://github.com/jarcoal/httpmock

La libreria modifica el http.DefaultClient, y permite rootear los calls para responder con la info mockeada

* Parametros adicionales

- -run ^TestName$: Corre todos los tests que matchean con el regex.
- -race: Corre los tests tratando de detectar race conditions.
- -cover: Corre los tests y te muestra el code coverage de cada package.

*Examples:*

Los examples son tests que funcionan como ejemplo de como funciona nuestra lib. Si usamos `godoc` para generar documentaci√≥n, entonces estos m√©todos aparecen como ejemplos en la documentaci√≥n.

.link https://golang.org/pkg/testing/ Testing Docs
.link https://blog.golang.org/subtests Using Subtests and Sub-benchmarks
.link https://blog.golang.org/examples Testable Examples in Go

* Benchmarks / Profiling

 import "testing"

Golang tiene benchmarking nativo por sampling, sigue la regla de los test, pero

 func Benchmark___(*testing.b)

y un n√∫mero de iteraciones que se debe ejecutar,

 func BenchmarkHeavy(b *testing.B) {
    for i := 0; i < b.N; i++ {
        DoSomeTask()
    }
 }

*Es*clave* realizar benchmarks antes de cualquier refactor por performance.‚ùó

* Serializacion

* JSON

- Documentaci√≥n: godoc.org/encoding/json

.code example/serialize_json_test.go /START 1/,/END 1/ HLxxx

* Caveats

- Ojo con los zero values.

 type Car struct {
     Color string `json:"color"`
 }

 json.Unmarshal([]byte(`{}`), &car)

 car.Color == ""

- Ojo con los null

El atributo en nuestra estructura tiene que ser un puntero a... sino queda el zero value

 type Car struct {
     Color string `json:"color"`
 }

 json.Unmarshal([]byte(`{"color":null}`), &car)

 car.Color == ""

* Validaci√≥n

Struct Validator:
.link https://github.com/go-playground/validator#package-validator

JSON Schema: 
.link https://github.com/santhosh-tekuri/jsonschema

* Webserver

* Con libreria estandar

.code ./example/webserver_std/main.go /START 1/,/END 1/

* Con chi

.code ./example/webserver_chi/main.go /START 1/,/END 1/

* Con gin

.code ./example/webserver_gin/main.go /START 1/,/END 1/

* Con gin (cont.)

.code ./example/webserver_gin/main.go /START 2/,/END 2/

* Tarea dia 4

- Convertir nuestro c√≥digo en una lib (pensando en un server multi downloads)
- Agregar tests! (https://github.com/jarcoal/httpmock)
- Como manejamos la metadata? Que hacemos si se muere una request?
- Soporte para multiples protocolos ademas de HTTP

* Objetivos

La idea era que el web server tenga los siguientes metodos:
- GET /downloads: lista todos los downloads activos o terminados, junto con su progreso.
- GET /downloads/{id}: lista un download particular, 404 si no existe.
- POST /downloads: manda un JSON un url a descargar y de a cuantas partes (opcionalmente donde bajarlo?)
- DELETE /downloads/{id}: cancela una descarga en progreso o elimina una descarga terminada